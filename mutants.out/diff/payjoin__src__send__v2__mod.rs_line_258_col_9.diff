--- payjoin/src/send/v2/mod.rs
+++ replace V2GetContext::extract_req -> Result<(Request, ohttp::ClientResponse), CreateRequestError> with Ok((Default::default(), Default::default()))
@@ -250,38 +250,17 @@
     hpke_ctx: HpkeContext,
 }
 
 impl V2GetContext {
     pub fn extract_req(
         &self,
         ohttp_relay: impl IntoUrl,
     ) -> Result<(Request, ohttp::ClientResponse), CreateRequestError> {
-        use crate::uri::UrlExt;
-        let base_url = self.endpoint.clone();
-
-        // TODO unify with receiver's fn subdir_path_from_pubkey
-        let hash = sha256::Hash::hash(&self.hpke_ctx.reply_pair.public_key().to_compressed_bytes());
-        let subdir: ShortId = hash.into();
-        let url = base_url
-            .join(&subdir.to_string())
-            .map_err(|e| InternalCreateRequestError::Url(e.into()))?;
-        let body = encrypt_message_a(
-            Vec::new(),
-            &self.hpke_ctx.reply_pair.public_key().clone(),
-            &self.hpke_ctx.receiver.clone(),
-        )
-        .map_err(InternalCreateRequestError::Hpke)?;
-        let mut ohttp =
-            self.endpoint.ohttp().map_err(|_| InternalCreateRequestError::MissingOhttpConfig)?;
-        let (body, ohttp_ctx) = ohttp_encapsulate(&mut ohttp, "GET", url.as_str(), Some(&body))
-            .map_err(InternalCreateRequestError::OhttpEncapsulation)?;
-
-        let url = ohttp_relay.into_url().map_err(InternalCreateRequestError::Url)?;
-        Ok((Request::new_v2(&url, &body), ohttp_ctx))
+        Ok((Default::default(), Default::default())) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn process_response(
         &self,
         response: &[u8],
         ohttp_ctx: ohttp::ClientResponse,
     ) -> Result<Option<Psbt>, ResponseError> {
         let response_array: &[u8; crate::directory::ENCAPSULATED_MESSAGE_BYTES] = response
