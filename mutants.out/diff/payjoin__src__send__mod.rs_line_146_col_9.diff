--- payjoin/src/send/mod.rs
+++ replace PsbtContext::check_inputs -> InternalResult<()> with InternalResult::new(())
@@ -138,66 +138,17 @@
             proposal.unsigned_tx.lock_time,
             self.original_psbt.unsigned_tx.lock_time,
             LockTimesDontMatch
         );
         Ok(())
     }
 
     fn check_inputs(&self, proposal: &Psbt) -> InternalResult<()> {
-        let mut original_inputs = self.original_psbt.input_pairs().peekable();
-
-        for proposed in proposal.input_pairs() {
-            ensure!(proposed.psbtin.bip32_derivation.is_empty(), TxInContainsKeyPaths);
-            ensure!(proposed.psbtin.partial_sigs.is_empty(), ContainsPartialSigs);
-            match original_inputs.peek() {
-                // our (sender)
-                Some(original)
-                    if proposed.txin.previous_output == original.txin.previous_output =>
-                {
-                    check_eq!(
-                        proposed.txin.sequence,
-                        original.txin.sequence,
-                        SenderTxinSequenceChanged
-                    );
-                    ensure!(
-                        proposed.psbtin.final_script_sig.is_none(),
-                        SenderTxinContainsFinalScriptSig
-                    );
-                    ensure!(
-                        proposed.psbtin.final_script_witness.is_none(),
-                        SenderTxinContainsFinalScriptWitness
-                    );
-                    original_inputs.next();
-                }
-                // theirs (receiver)
-                None | Some(_) => {
-                    let original = self
-                        .original_psbt
-                        .input_pairs()
-                        .next()
-                        .ok_or(InternalProposalError::NoInputs)?;
-                    // Verify the PSBT input is finalized
-                    ensure!(
-                        proposed.psbtin.final_script_sig.is_some()
-                            || proposed.psbtin.final_script_witness.is_some(),
-                        ReceiverTxinNotFinalized
-                    );
-                    // Verify that non_witness_utxo or witness_utxo are filled in.
-                    ensure!(
-                        proposed.psbtin.witness_utxo.is_some()
-                            || proposed.psbtin.non_witness_utxo.is_some(),
-                        ReceiverTxinMissingUtxoInfo
-                    );
-                    ensure!(proposed.txin.sequence == original.txin.sequence, MixedSequence);
-                }
-            }
-        }
-        ensure!(original_inputs.peek().is_none(), MissingOrShuffledInputs);
-        Ok(())
+        InternalResult::new(()) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Restore Original PSBT utxos that the receiver stripped.
     /// The BIP78 spec requires utxo information to be removed, but many wallets
     /// require it to be present to sign.
     fn restore_original_utxos(&self, proposal: &mut Psbt) -> InternalResult<()> {
         let mut original_inputs = self.original_psbt.input_pairs().peekable();
         let proposal_inputs =
