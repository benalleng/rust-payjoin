--- payjoin/src/send/v2/mod.rs
+++ replace V2GetContext::process_response -> Result<Option<Psbt>, ResponseError> with Ok(Some(Default::default()))
@@ -279,37 +279,17 @@
         Ok((Request::new_v2(&url, &body), ohttp_ctx))
     }
 
     pub fn process_response(
         &self,
         response: &[u8],
         ohttp_ctx: ohttp::ClientResponse,
     ) -> Result<Option<Psbt>, ResponseError> {
-        let response_array: &[u8; crate::directory::ENCAPSULATED_MESSAGE_BYTES] = response
-            .try_into()
-            .map_err(|_| InternalEncapsulationError::InvalidSize(response.len()))?;
-
-        let response = ohttp_decapsulate(ohttp_ctx, response_array)
-            .map_err(InternalEncapsulationError::Ohttp)?;
-        let body = match response.status() {
-            http::StatusCode::OK => response.body().to_vec(),
-            http::StatusCode::ACCEPTED => return Ok(None),
-            _ => return Err(InternalEncapsulationError::UnexpectedStatusCode(response.status()))?,
-        };
-        let psbt = decrypt_message_b(
-            &body,
-            self.hpke_ctx.receiver.clone(),
-            self.hpke_ctx.reply_pair.secret_key().clone(),
-        )
-        .map_err(InternalEncapsulationError::Hpke)?;
-
-        let proposal = Psbt::deserialize(&psbt).map_err(InternalProposalError::Psbt)?;
-        let processed_proposal = self.psbt_ctx.clone().process_proposal(proposal)?;
-        Ok(Some(processed_proposal))
+        Ok(Some(Default::default())) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 #[cfg(feature = "v2")]
 #[derive(Debug, Clone)]
 struct HpkeContext {
     receiver: HpkePublicKey,
     reply_pair: HpkeKeyPair,
